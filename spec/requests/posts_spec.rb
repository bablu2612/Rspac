 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

  
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
RSpec.describe PostsController, :type => :controller do
  context "Happy" do
    describe "GET /index" do
      it "renders a successful response" do
        get :index
        expect(response).to have_http_status(:ok)
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        post_data=create_post()
        post :show, :params => {id: post_data.id}
        expect(response).to have_http_status(:ok)
      end
    end

    describe "GET /delete" do
      it "successfully delete a post" do
        sign_in_user()
        post=create_post()
        delete :destroy, :params => {id: post.id}
        expect(response).to redirect_to posts_path
        expect(response).to have_http_status(302)
        expect(flash[:notice]).to eq "Post was successfully destroyed."
      end
    end

    describe "Update a post" do
      it "successfully updated a post" do
        sign_in_user()
        post_data=create_post()
        form_params = {
          id: post_data.id,
          post: {
            title: "This is modified post",
            body: "this is updated body", 
            views: 14,
            user_id: 1
          }
        }
        patch :update,  params: form_params
        expect(response).to redirect_to post_data
        expect(response).to have_http_status(302)
        expect(flash[:notice]).to eq("Post was successfully updated.")
      end
    end

    describe "Create a post" do
      it "successfully created a post" do
        sign_in_user()
        form_params = {
          post: {
            id: '',
            title: "This is a new post",
            body: "this is post body", 
            views: 14,
            user_id:1
          }
        }
        post :create,  params: form_params
        expect(response).to have_http_status(302)
        expect(flash[:notice]).to eq("Post was successfully created.")
      end
    end
  end

  context "Sad" do
    describe "Get /show" do
      it "record not found" do
        post :show, :params => {id: 'a'}
        expect(response).to redirect_to root_url
        expect(flash[:notice]).to eq "Record not found"
      end
    end

    describe "delete /destroy" do
      it "record not found" do
        sign_in_user()
        post :destroy, :params => {id: 'a'}
        expect(response).to redirect_to root_url
        expect(flash[:notice]).to eq "Record not found"
      end
    end

    describe "Create a post" do
      it "invalid attributes" do
        sign_in_user()
        form_params = {
          post: {
            id: '',
            title: "This is a new post",
            body: "this is post body", 
            views: "fdas",
            user_id: 1,
          }
        }
        post :create,  params: form_params
        expect(response).to have_http_status(422)
      end
    end

    describe "Update a post" do
      it "invalid attributes" do
        sign_in_user()
        form_params = {
          post: {
            id: '',
            title: 45,
            body: "this is post body", 
            views: "fdas",
            user_id: 1,
          }
        }
        post :create,  params: form_params
        expect(response).to have_http_status(422)
      end
    end    
  end

  context "Mad" do
    describe "Get /show" do
      it "record not found" do
        sign_in_user()
        post :show, :params => {id: 'a'}
        expect(response).to redirect_to root_url
        expect(flash[:notice]).to eq "Record not found"
      end
    end

    describe "delete /destroy" do
      it "record not found" do
        post :destroy, :params => {id: 'a'}
        expect(response).to redirect_to root_url
        expect(flash[:notice]).to eq "Record not found"
      end
    end

    describe "Create a post" do
      it "invalid attributes" do
        sign_in_user()
        form_params = {
          post: {
            id: '',
            title: "This is a new post",
            body: "this is post body", 
            views: "fdas",
            user_id: '*',
          }
        }
        post :create,  params: form_params
        expect(response).to have_http_status(422)
      end
    end

    describe "Update a post" do
      it "invalid attributes" do
        sign_in_user()
        form_params = {
          post: {
            id: '',
            title: '',
            body: "this is post body", 
            views: "@e32fdas",
            user_id: "@dd",
          }
        }
        post :create,  params: form_params
        expect(response).to have_http_status(422)
      end
    end    
  end
  
  def create_post
    Post.create(id: 2,title: "This is post", body: "This is body",views: 15,user_id:1,created_at:"",updated_at:"")
  end

  def sign_in_user
    @user=User.first
    sign_in @user
  end

end


 
